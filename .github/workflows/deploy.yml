name: deploy

on:
  push:
    branches:
      - main

env:
  BINARY: behaviour-assessment

jobs:
  create-windows-binary:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Build binary
      run: cargo build --release

    - name: Create package
      id: package
      shell: bash
      run: |
        ARCHIVE_TARGET="x86_64-pc-windows-msvc"
        ARCHIVE_NAME="$BINARY-$ARCHIVE_TARGET"
        ARCHIVE_FILE="${ARCHIVE_NAME}.zip"
        7z a ${ARCHIVE_FILE} ./target/release/$BINARY.exe
        echo "file=${ARCHIVE_FILE}" >> $GITHUB_OUTPUT
        echo "name=${ARCHIVE_NAME}.zip" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package.outputs.name }}
        path: ${{ steps.package.outputs.file }}

  create-unix-binary:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create package
      id: package
      run: |
        TAR_FILE=$BINARY-${{ matrix.target }}
        cd target/${{ matrix.target }}/release
        tar -czvf $GITHUB_WORKSPACE/$TAR_FILE.tar.gz $BINARY
        echo "file=${TAR_FILE}.tar.gz" >> $GITHUB_OUTPUT
        echo "name=${TAR_FILE}" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package.outputs.name }}
        path: ${{ steps.package.outputs.file }}

  deploy:
    needs: [create-windows-binary, create-unix-binary]
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Get version from Cargo.toml
      id: version
      run: |
        VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./binaries

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.tag }}
        name: v${{ steps.version.outputs.tag }}
        files: |
          ./binaries/**/*.zip
          ./binaries/**/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}